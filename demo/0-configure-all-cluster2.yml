---
- hosts: localhost
  gather_facts: false
  name: NetApp Cluster1 System Setup
  ignore_errors: yes
  vars:
    login: &login
     hostname: 192.168.0.102
     username: admin
     password: Netapp1!
     https: true
     validate_certs: false
  vars_files:
  - var_cluster2.yml
  tasks:
  - name: Install Licenses on Cluster2
    na_ontap_cluster:
      state: present
      license_code: "{{ item }}"
      <<: *login
    with_items: "{{ licenses }}"
    tags:
    - cluster2
  - name: Set NTP
    na_ontap_ntp:
      state: present
      version: auto
      server_name: "{{ ntpservers }}"
      <<: *login
    tags:
    - cluster1
  - name: Set Timezone
    na_ontap_command:
      command: ['time', '-timezone', 'Europe/Brussels']
      privilege: admin
      <<: *login
    tags:
    - cluster1
  - name: Create and Online New Data Aggregate Node1
    na_ontap_aggregate:
      state: present
      service_state: online
      nodes: "{{ item.node }}"
      name: "{{ item.name }}"
      disk_count: "{{ item.diskcount }}"
      wait_for_online: true
      time_out: 300
      <<: *login
    with_items: "{{ aggr }}"
    tags:
    - cluster1
  - name: Create Vserver svm3 and svm4
    na_ontap_svm:
      state: present
      name: "{{ item.name }}"
      root_volume: "{{ item.rootvol }}"
      root_volume_aggregate: "{{ item.rootaggr }}"
      aggr_list: "{{ item.aggr_list }}"
      allowed_protocols: "{{ item.allowed_protocols }}"
      <<: *login
    with_items: "{{ svm }}"
    tags:
    - cluster2
  - name: Create subnet
    na_ontap_net_subnet:
      state: present
      subnet: 192.168.0.0/24
      name: Demo
      ip_ranges: [ '192.168.0.123-192.168.0.129' ]
      gateway: 192.168.0.1
      ipspace: Default
      broadcast_domain: Default  
      <<: *login
  - name: Create NFS interfaces on svm3 and svm4
    na_ontap_interface:
      state: present
      interface_name: "{{ item.name }}"
      home_port: "{{ item.home }}"
      home_node: "{{ item.node }}"
      role: data
      protocols: nfs
      admin_status: up
      failover_policy: system-defined
      firewall_policy: data
      is_auto_revert: true
      subnet_name: "{{ subnetname }}"
      vserver: "{{ item.vserver }}"
      <<: *login
    with_items: "{{ lif }}"
    tags:
    - cluster2   
  - name: Start NFS
    na_ontap_nfs:
      state: present
      service_state: started
      vserver: "{{ item.name }}"
      nfsv3: enabled
      <<: *login
    with_items: "{{ svm }}"
    tags:
    - cluster2
  - name: Add NFS Export Rule Under Default Policy
    na_ontap_export_policy_rule:
      state: present
      name: default
      vserver: "{{ item.name }}"
      client_match: "{{ nfsclientmatchsubnet }}"
      ro_rule: sys
      rw_rule: sys
      protocol: nfs
      super_user_security: any
      <<: *login
    with_items: "{{ svm }}"
    tags:
    - cluster2
  - name: Add DNS Settings to svm
    na_ontap_dns:
      state: present
      vserver: "{{ item.name }}"
      domains: "{{ item.domain }}"
      nameservers: "{{ item.dns_servers }}"
      skip_validation: true
      <<: *login
    with_items: "{{ svm }}"
    tags:
    - cluster2
  - name: Create Volumes
    na_ontap_volume:
      state: present
      name: "{{ item.name }}"
      vserver: "{{ item.vserver }}"
      aggregate_name: "{{ item.aggr }}"
      size: "{{ item.size }}"
      size_unit: gb
      policy: default
      junction_path: "/{{ item.name }}"
      percent_snapshot_space: 0
      space_guarantee: none
      volume_security_style: "{{ item.security_style }}"
      wait_for_completion: true
      <<: *login
    with_items: "{{ vols }}"
    tags:
    - cluster2
  - name: Source vserver peer create
    na_ontap_vserver_peer:
      state: present
      peer_vserver: "{{ dst_vserver }}"
      vserver: "{{ src_vserver }}"
      applications: snapmirror
      <<: *login
    tags:
    - replication
  - name: Validate destination FlexVol
    na_ontap_volume:
      state: present
      name: "{{ dst_volume }}"
      aggregate_name: "{{ dst_aggr }}"
      size: 1
      size_unit: gb
      type: DP
      vserver: "{{ dst_vserver }}"
      <<: *login
    tags:
    - replication
  - name: Create SnapMirror
    na_ontap_snapmirror:
      state: present
      source_volume: "{{ src_volume }}"
      destination_volume: "{{ dst_volume }}"
      source_vserver: "{{ src_vserver }}"
      destination_vserver: "{{ dst_vserver }}"
      <<: *login
    tags:
    - svm1
    - svm2
    - replication
  
